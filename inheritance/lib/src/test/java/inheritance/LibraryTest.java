/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inheritance;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }
//Test that your Restaurant constructor is behaving reasonably.
    @Test void TestRestCons(){
        Resturant resturant = new Resturant("Mac",50);
        assertEquals(50,resturant.getPrice());
        assertEquals("Mac",resturant.getName());
    }
//Write a test to create an instance of Restaurant and ensure that its toString is working properly.
    @Test void TesttoStringRes(){
        Resturant resturant = new Resturant("Mac",50);
        assertEquals("Resturant{name='Mac', stars=0, price=50, ListReview=[]}",resturant.toString());
    }
//Test that your Review constructor is working reasonably.
    @Test void TestRevCon(){
        Review review = new Review("Nice Place","Alaa",5);
        assertEquals("Nice Place",review.getBody());
        assertEquals("Alaa",review.getAuthor());
        assertEquals(5,review.getStars());
    }
    // Read https://junit.org/junit4/faq.html#atests_7
    // Read https://stackoverflow.com/questions/156503/how-do-you-assert-that-a-certain-exception-is-thrown-in-junit-4-tests
    @Test  public void TestRevConStar(){
        try {
            Review review = new Review("Nice Place","Alaa",6);
            fail( "My method didn't throw when I expected it to" );
        } catch (IllegalArgumentException expectedException) {
        }
    }
// Write a test to create an instance of Review and ensure that its toString is working properly.
    @Test void TesttoStringRev(){
        Review review = new Review("Nice Place","Alaa",5);
        assertEquals("Review{body='Nice Place', author='Alaa', stars=5}",review.toString());
    }
//Add tests to ensure that when you call addReview, the association is created between the Restaurant and the Review.
    @Test void TestAddRevToRes(){
        Resturant resturant = new Resturant("Mac",50);
        Review review = new Review("Nice Place","Alaa",5);
        resturant.addReview(review);
        assertEquals("Resturant{name='Mac', stars=5, price=50, ListReview=[Review{body='Nice Place', author='Alaa', stars=5}]}",resturant.toString());
    }
/*add tests. (In particular, ensure that if youâ€™re trying to call addReview when the restaurant and the review are already
 associated, the star rating of the restaurant does not update.)
 */
    @Test void TestAddRevToResSameAuther(){
        Resturant resturant = new Resturant("Mac",50);
        Review review = new Review("Nice Place","Alaa",5);
        resturant.addReview(review);
        Review review2 = new Review("Nice Place","Alaa",3);
        resturant.addReview(review2);

        assertEquals("Resturant{name='Mac', stars=5, price=50, ListReview=[Review{body='Nice Place', author='Alaa', stars=5}, Review{body='Nice Place', author='Alaa', stars=3}]}",resturant.toString());
    }


}
