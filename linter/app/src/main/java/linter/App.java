/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.Objects;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        //System.out.println(new App().getGreeting());

       // App app = new App();
        ArrayList<String> ErrorMessages = ReadErrorFile("gates.js");
        System.out.println("//////////// The Error Found in Lines # ///////////////");
        for (String error:
                ErrorMessages) {
            System.out.println(error);
        }
    }

    public static ArrayList<String> ReadErrorFile(String filename){
        ArrayList<String> errorHandle = new ArrayList<>();

        //Path path = Paths.get("app/src/main/resources/"+filename+".js"); // if we pass the file name
        try {
           // FileReader myfile = new FileReader("app/src/main/resources/gates.js");

          // taken From https://kodejava.org/how-do-i-use-linenumberreader-class-to-read-file/ (line 38-40)
            String filename1 = Objects.requireNonNull(Thread.currentThread().getContextClassLoader()
                    .getResource(filename)).getFile();
            FileReader filereader = new FileReader(filename1);

            LineNumberReader reader = new LineNumberReader(filereader);
            //BufferedReader reader = Files.newBufferedReader(path);

            String line = reader.readLine();
            if(line == null){
                System.out.println("File is Empty");
                errorHandle.add("Empty");
            }
            while (line != null) {
                if(line.startsWith("//") || line.endsWith(";") || line.endsWith("}") || line.endsWith("{") || line.contains("if") || line.contains("else") || line.length()==0){
                    System.out.println(line);

                }else{
                    errorHandle.add("Line "+ reader.getLineNumber() +" : Missing semicolon.");
                    System.out.println("Line "+ reader.getLineNumber() +" : Missing semicolon." );
                }

                line = reader.readLine();
            }
            reader.close();
        } catch (IOException exception) {
            System.err.println(exception.getMessage());
        } finally {
            System.out.println("Program executed"); // read up on why this is useful
        }
        return  errorHandle;
    }
}
